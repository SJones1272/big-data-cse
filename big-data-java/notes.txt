

DataSourceManager
 - getCacheLocation() : String
 - setCacheLocation(String path)
 - getCacheTimeout() : long
 - setCacheTimeout(long msec)  

 - listAll() : String[]
 - usage(String dsName)
 - use(String dsName, String ops...)
 

IDataSource
 - fetchObject(String clsName, String flds...) : Object
 
 - fetchObjects(String clsName, String flds...) : ArrayList<Object>
 - fetchObjects(int N, String clsName, String flds...) : ArrayList<Object>
 
 - fetchObjectArray(String clsName, String flds...) : Object[]
 - fetchObjectArray(int N, String clsName, String flds...) : Object[]
 
 - fillObjectArray(Object[] A, String clsName, String flds...) 

 - filter(string key, string value)
 - select(string serviceName)
 - usage()
 
 
 
AbsDataSource : IDataSource
 - isEmpty() : boolean
 - numRecords() : int
 - getRecord(int i) : IDataRow
 - saveToFile(File) : boolean
 - readFromFile(File) : boolean


Weather : AbsDataSource
 Weather(String zipcode)

XMLDataSource : AbsDataSource

CSVDataSource : AbsDataSource

TestDataSource : AbsDataSource
 - addRecord(IDataRecord)


IDataRecord
  maps  name -> IDataField
 - fieldNames() : String[]
  
IDataField
 - asInt() : int
 - asLong() : long
 - asString() : String
 - asDouble() : double
 - asFloat() : float
 - asBoolean() : boolean
 - asChar() : char
 - asArrayList(Class<T> cls) : ArrayList<T>
 - asArray(Class<T> cls) : T[]
 - isList() : boolean
 - isPrimitive() : boolean


HashRecord : IDataRecord
 map String -> StringField/ListField

StringField : IDataField
ListField : IDataField



xml = 
<body>
<report>
   <date> ... </date>
   <reading>
      <time> ... </time>
   	  <temp> ... </temp>
   </reading>
   <reading>
   	  <time> ... </time>
   	  <temp> ... </temp>
   </reading>
</report>
</body>


rp = new CompField("report")
rp.add(new PrimField("date"))

rd = new CompField("reading")
rd.add("time", new PrimField("time"))
rd.add("temperature", new PrimField("temp"))
rp.add("readings", new ListField(rd))

xml = load...()
xds = new XMLDataSource(xml)
xds.addService("weather report", rp, true)   // gives back structured  (default service)
xds.addService("weather reading", new CompField("report/reading"))   // gives back single reading
xds.addService("weather reading list", new ListField(new CompField("report/reading")));  // gives back list of all readings
xds.addService("date", new PrimField("date"))

...

xds.selectService("date")
xds.fetchString()

xds.fetch(xds.object("Report", "date", xds.listOf(xds.object("Reading", "time", "temp"))))
xds.fetchObject("Reading", "date", "time", "temp");   // nested/array/flattened object - should happen automatically (?)
xds.fetchObject("Report1", "date", xds.object("Reading", "time", "temp"))  // nested objects

xds.selectService("weather reading list");
xds.fetch(xds.listOf(xds.object("Reading", "time", "temp")))




XMLDataSource xds = XMLDataSource.getInstance("weather");

System.out.println(xds.usage());

{
  SecondReport c1 = xds.fetch("SecondReport", "date", "time", "tempF");
...
delay(1);
}


class SecondReport {
   ...
   
   SecondReport(String d, String t, int f) { ... }
   SecondReport(String dt, int f) { ... }
}

